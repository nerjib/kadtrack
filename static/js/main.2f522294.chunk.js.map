{"version":3,"sources":["calender.js","home.js","borderdetails.js","App.js","serviceWorker.js","index.js"],"names":["Calender","props","handleChange","e","target","value","name","setState","handleSubmit","onCalender","state","day","month","Date","getDate","getMonth","className","id","onChange","this","onClick","React","Component","Home","onLoad","axios","get","then","res","receivedData","data","catch","error","console","log","handleCalender","entry","exit","inTerval","setInterval","inInterval2","tick2","clearInterval","time","toLocaleString","row","entryRow","exitRow","Object","keys","map","i","date","push","euid","key","vehicle_no","vehicle_type","driver_no","no_kd_passenger","no_male","no_female","temp","border_name","gps","exit_gate","etime","style","background","getHours","getMinutes","getSeconds","BorderDetails","componentDidMount","lga","uname","pword","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2f522294.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class Calender extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            day:new Date().getDate(),\r\n            month:new Date().getMonth()\r\n        }\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        const { value, name } = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    handleSubmit=()=>{\r\n//alert(this.state.day)\r\nthis.props.onCalender(this.state.day,this.state.month)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                  Day<select className='form-control' id='title' name='day' onChange={this.handleChange}>\r\n                <option >...select</option>\r\n                <option value='1'>1</option>\r\n                    <option value='2'>2</option>\r\n                    <option value ='3'>3</option>\r\n                    <option value ='4'>4</option>\r\n                    <option value ='5'>5</option>\r\n                    <option value ='6'>6</option>\r\n                    <option value ='7'>7</option>\r\n                    <option value ='8'>8</option>\r\n                    <option value ='9'>9</option>\r\n                    <option value ='10'>10</option>\r\n                    <option value ='11'>11</option>\r\n                    <option value ='12'>12</option>\r\n                    <option value ='13'>13</option>\r\n                    <option value ='14'>14</option>\r\n                    <option value ='15'>15</option>\r\n                    <option value ='16'>16</option>\r\n                    <option value ='17'>17</option>\r\n                    <option value ='18'>18</option>\r\n                    <option value ='19'>19</option>\r\n                    <option value ='20'>20</option>\r\n                    <option value ='21'>21</option>\r\n                    <option value ='22'>22</option>\r\n                    <option value ='23'>23</option>\r\n                    <option value ='24'>24</option>\r\n                    <option value ='25'>25</option>\r\n                    <option value ='26'>26</option>\r\n                    <option value ='27'>27</option>\r\n                    <option value ='28'>28</option>\r\n                    <option value ='29'>29</option>\r\n                    <option value ='30'>30</option>\r\n                    <option value ='31'>31</option>\r\n\r\n                    </select>\r\n                    Month                   <select className='form-control' id='title' name='month' onChange={this.handleChange}>\r\n                <option >...select</option>\r\n                <option value= '0' >Jan</option>\r\n                    <option value='1'>Feb</option>\r\n                    <option value ='2'>Mar</option>\r\n                    <option value ='3'>Apr</option>\r\n                    <option value ='4'>May</option>\r\n                    <option value ='5'>Jun</option>\r\n                    <option value ='6'>Jul</option>\r\n                    <option value ='7'>Aug</option>\r\n                    <option value ='8'>Sep</option>\r\n                    <option value ='9'>Oct</option>\r\n                    <option value ='10'>Nov</option>\r\n                    <option value ='11'>Dec</option>\r\n                    </select>\r\n                    <option1/>\r\n\r\n             \r\n        <button onClick={this.handleSubmit}>Search</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport axios from 'axios'\r\nimport Calender from './calender'\r\n\r\n// let entry=0;\r\n\r\nexport default class Home extends React.Component{\r\nconstructor(props){\r\n    super(props)\r\n    this.state = {\r\n        receivedData:'',\r\n        day:new Date().getDate(),\r\n        month:new Date().getMonth(),\r\n        entry: 0,\r\n        exit: 0\r\n    }\r\n}\r\nonLoad=()=>{\r\n    axios.get('https://kdmotor.herokuapp.com/api/v1/')\r\n    .then(res=>{\r\n        this.setState({\r\n            receivedData: res.data\r\n        })\r\n    }).catch(error=>{console.log(error)})\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n    this.inTerval=setInterval(()=>this.onLoad(),60000)\r\n    this.onLoad();\r\n    this.inInterval2= setInterval( ()=>this.tick2(), 1000);\r\n\r\n}\r\ncomponentWillMount(){\r\n    clearInterval(this.inTerval)\r\n    clearInterval(this.inInterval2)\r\n\r\n}\r\n\r\nhandleCalender=(day=new Date().getDate(),month=new Date().getMonth())=>{\r\n    this.setState({\r\n            day,\r\n            month,\r\n    })\r\n}\r\n\r\ntick2(){\r\n    this.setState({\r\n      time: new Date().toLocaleString()\r\n\r\n    })\r\n}\r\n\r\nrender (){\r\n    let row =[]\r\n    let entryRow=[]\r\n    let exitRow=[]\r\n    \r\n    Object.keys(this.state.receivedData).map((e,i) => {\r\n        \r\n\r\n     if(new Date(this.state.receivedData[e].date).getDate()==this.state.day & new Date(this.state.receivedData[e].date).getMonth()==this.state.month){\r\n       entryRow.push(i)\r\n       if(this.state.receivedData[e].euid !=0){\r\n           exitRow.push(i)\r\n       }\r\n    row.push(<tr key={i}><td>{this.state.receivedData[e].vehicle_no}</td>\r\n    <td>{this.state.receivedData[e].vehicle_type}</td><td>{this.state.receivedData[e].driver_no}</td><td>{this.state.receivedData[e].no_kd_passenger}</td>\r\n        <td>{this.state.receivedData[e].no_male}</td><td>{this.state.receivedData[e].no_female}</td><td>{this.state.receivedData[e].temp}</td>\r\n        <td>{this.state.receivedData[e].border_name}</td><td>{this.state.receivedData[e].time}</td><td>{this.state.receivedData[e].gps}</td>\r\n        <td>{this.state.receivedData[e].exit_gate}</td><td>{this.state.receivedData[e].etime}</td>\r\n    </tr>)\r\n}\r\n    }\r\n    )\r\n    return (\r\n        <div>\r\n         <div className='row col-md-12' style={{background:'#00d2d2'}}>\r\n\r\n<div className='col-md-4'>\r\n<Calender onCalender={this.handleCalender}/>\r\n</div>\r\n<div>\r\n    <h1>\r\n    KADUNA TRACKING SYSTEM\r\n    <br/>\r\n    {new Date(this.state.time).getHours()}:{new Date(this.state.time).getMinutes()}:{new Date(this.state.time).getSeconds()}\r\n <br/>\r\n {this.state.day}/{this.state.month+1}/2020\r\n </h1>\r\n\r\n </div>\r\n </div>\r\n <div>\r\n   {/*  Entry<br/>\r\n   <h3> No of cars: {entryRow.length}</h3>\r\n </div>\r\n <div>\r\n     Exit<br/>\r\n     <h3> No of cars: {exitRow.length}</h3>*/\r\n     }\r\n </div>\r\n\r\n            <table className='table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Vehicle Number</th><th>Vehicle Type</th><th>Drivers Phone</th>\r\n                        <th>Passengers Alighting in Kaduna</th><th>No of Male Passengers</th><th>No of Female Passengers</th>\r\n                        <th>Passengers With Temp. > 38</th> <th> Point of Entry</th><th>Entry Time</th><th>GPS</th>\r\n                        <th>Exist Point</th><th>Exit Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {row}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class BorderDetails extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n                receivedData:''\r\n        }\r\n    }\r\ncomponentDidMount=()=>{\r\n    axios.get('https://kdmotor.herokuapp.com/api/v1/allusers')\r\n    .then(res=>{\r\n        this.setState({\r\n            receivedData: res.data\r\n        })\r\n    }).catch(error=>{console.log(error)})\r\n}\r\n\r\nrender(){\r\nlet row =[];\r\n    Object.keys(this.state.receivedData).map((e,i)=>{row.push(<tr><td>{i+1}</td><t>{this.state.receivedData[e].border_name}</t>\r\n    <td>{this.state.receivedData[e].lga}</td><td>{this.state.receivedData[e].uname}</td>{this.state.receivedData[e].pword}\r\n    </tr>)})\r\n        return (\r\n            <div>\r\n                <table className='table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SN</th><th>Point of Entry</th><th>LGA</th><th>username</th><th>password</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {row}\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Home from './home'\r\nimport './App.css';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport BorderDetails from './borderdetails'\r\n\r\n//import covid19ImpactEstimator from '../../src/estimator'\r\n\r\nfunction App() {\r\n\r\n//alert(  covid19ImpactEstimator(3))\r\n  return (\r\n    <div className=\"App\">\r\n     <Switch>\r\n        <Route path=\"/\" exact component={(Home)} />\r\n        <Route path=\"/borders\" exact component={BorderDetails} />\r\n\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css'\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}